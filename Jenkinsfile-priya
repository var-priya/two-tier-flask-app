pipeline{
    agent any
    environment {
        SONARQUBE_ENV = tool 'SonarScanner' //should be same as sonarScanner
    }
    stages{
        stage("Code clone from github"){
            steps{
               git url: "https://github.com/var-priya/two-tier-flask-app.git", branch:"master"
             }
        }
        stage("SonarQube Analysis"){
             steps{
               withSonarQubeEnv("Sonar"){   //should be same as sonar server 
                    sh "$SONARQUBE_ENV/bin/sonar-scanner -Dsonar.projectName=Nodejs -Dsonar.projectKey=Nodejs"
                }
             }
        }
        stage("Owasp dependency check"){
             steps{
               dependencyCheck additionalArguments:'--scan ./' , odcInstallation: 'Owasp'
               dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
             }
        }
        stage("Sonar Quality Gate Scan"){
             steps{
               timeout(time: 2, unit: 'MINUTES'){
                   waitForQualityGate abortPipeline: false
               }
             }
        }
        stage("Trivy File system Scan"){
             steps{
               sh "trivy fs --format table -o trivy-fs-report.html ."
             }
        }
        stage("Deploy using docker compose "){
             steps{
               sh "docker-compose up -d"
             }
        }
        
 }
}
